package standrews.cs5099.mpp.tasks;

import java.util.List;
import java.util.Stack;
import java.util.concurrent.ExecutorService;

import standrews.cs5099.mpp.core.TaskExecutor;
import standrews.cs5099.mpp.core.WorkerService;
import standrews.cs5099.mpp.instructions.Instruction;

/**
 * Wrapper for all workers
 * @author Gursher
 *
 */
public class RootWorker implements Runnable{
	// Actual data to be executed
		private Object data;
		// Parent Task
		private MPPTask parentTask;
		// Root Task
		private MPPTask rootTask;
		// List of child task generated by current task
		private List<MPPTask> childTasks;
		// ExecutorService responsible for executing task
		private TaskExecutor assignedTaskExecutor;
		// Future object which holds result of computation
		private TaskFuture taskFuture;
		// Execution instruction stack
		private Stack<Instruction> instructionStack;

		/**
		 * Constructor for Root Task
		 * 
		 * @param data
		 * @param assignedTaskExecutor
		 */
		public RootWorker(Object data, ExecutorService assignedTaskExecutor, Stack<Instruction> instructionStack) {
			this.data = data;
			//this.rootTask = this;
			this.assignedTaskExecutor = (TaskExecutor) assignedTaskExecutor;
			this.instructionStack = instructionStack;
			//taskFuture = new TaskFuture(this.assignedTaskExecutor, this);
		}

		

		/**
		 * Returns true if current task is a Root task (a Task with no parent)
		 * 
		 * @return
		 */
		public boolean isRootTask() {
			return (parentTask == null);
		}

		/**
		 * Method which is invoked by an thread issued by the executor service
		 * 
		 */
		@Override
		public void run() {
			System.out.println("Wow task is being executed");

			//WorkerService.executeTask(this);
			/**
			 * O result = (O) WorkerService.executeTask(this); return null;
			 **/
		}

		public boolean isTaskFinished() {
			/** dummy return value **/
			return true;
		}

		public TaskFuture getFuture() {
			
			//return rootTask.taskFuture;
			return null;
		}

		public MPPTask getParentTask() {
			return this.parentTask;
		}

		/**
		 * Fetch data field of a Task
		 * 
		 * @return
		 */
		public Object getData() {
			return data;
		}

		/**
		 * Update the data field of the Task
		 * 
		 * @param data
		 */
		public void setData(Object data) {
			this.data = data;
		}

		public MPPTask getRootTask() {
			return rootTask;
		}

		public void setRootTask(MPPTask rootTask) {
			this.rootTask = rootTask;
		}

		public List<MPPTask> getChildTasks() {
			return childTasks;
		}

		public void setChildTasks(List<MPPTask> childTasks) {
			this.childTasks = childTasks;
		}

		public TaskExecutor getAssignedTaskExecutor() {
			return assignedTaskExecutor;
		}

		public void setAssignedTaskExecutor(TaskExecutor assignedTaskExecutor) {
			this.assignedTaskExecutor = assignedTaskExecutor;
		}

		public void setParentTask(MPPTask parentTask) {
			this.parentTask = parentTask;
		}

		public synchronized boolean areChildTasksFinished() {
			// dummy value
			return true;
		}

		public synchronized boolean hasChildTasks() {
			return (null != childTasks && childTasks.size() > 0);
		}
		
		
		public Stack<Instruction> getInstructions() {
			return instructionStack;
		}

		public void setInstructions(Stack<Instruction> instructionStack) {
			this.instructionStack = instructionStack;
		}
}
